package cmd

import (
	"context"
	"fmt"
	"os"

	"github.com/spf13/cobra"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/client-go/scale/scheme"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/client/config"

	simkubev1 "simkube/lib/go/api/v1"
)

const (
	runCmdName = "run"

	simNameFlag = "sim-name"

	driverNamespace = "simkube"
	traceFile       = "file:///data/trace"
)

//nolint:gochecknoglobals
var simulationScheme = runtime.NewScheme()

func Run() *cobra.Command {
	run := &cobra.Command{
		Use:   runCmdName,
		Short: "run a simulation",
		Run:   doRun,
	}
	run.Flags().String(simNameFlag, "", "the name of simulation to run")
	return run
}

func doRun(cmd *cobra.Command, _ []string) {
	// None of these error conditions should get hit, since they are all assigned default values?
	// I'm not sure if there's a better way to do this or not.
	simName, err := cmd.Flags().GetString(simNameFlag)
	if err != nil || simName == "" {
		fmt.Printf("no simulation name specified: %v\n", err)
		os.Exit(1)
	}

	k8sClient, err := client.New(config.GetConfigOrDie(), client.Options{Scheme: simulationScheme})
	if err != nil {
		fmt.Printf("could not construct Kubernetes client: %v\n", err)
		os.Exit(1)
	}

	sim := simkubev1.Simulation{
		ObjectMeta: metav1.ObjectMeta{Name: simName},
		Spec: simkubev1.SimulationSpec{
			DriverNamespace: driverNamespace,
			Trace:           traceFile,
		},
	}
	if err = k8sClient.Create(context.Background(), &sim); err != nil {
		fmt.Printf("could not create simulation: %v\n", err)
		os.Exit(1)
	}
}

//nolint:gochecknoinits // generated by kubebuilder
func init() {
	utilruntime.Must(scheme.AddToScheme(simulationScheme))
	utilruntime.Must(simkubev1.AddToScheme(simulationScheme))
}
