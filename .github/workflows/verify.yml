---
name: code verification
on:   # yamllint disable-line rule:truthy
  push:
    branches:
      - "master"
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: sccache
  IN_CI: "true"
  RUST_NIGHTLY_VERSION: 2025-06-23

jobs:
  skctl:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Check out repo and build scripts
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Builder
        uses: ./.github/actions/setup-builder
      - name: Build skctl
        run: make skctl
      - name: Check version
        run: .build/skctl --version

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo and build scripts
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Builder
        uses: ./.github/actions/setup-builder
      - name: Build
        run: make build
      - name: Regenerate CRDs
        run: .build/skctl crd > k8s/raw/simkube.io_simulations.yml
      - name: Check CRDs are clean
        uses: CatChen/check-git-status-action@v1
        with:
          fail-if-not-clean: true

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo and build scripts
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Builder
        uses: ./.github/actions/setup-builder
      - name: Install rustfmt nightly
        run: |
          rustup toolchain install nightly-${RUST_NIGHTLY_VERSION}
          rustup component add rustfmt --toolchain nightly-${RUST_NIGHTLY_VERSION}
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install poetry
        uses: snok/install-poetry@v1
      # tomlq (included with yq) is needed to check the package version in Cargo.toml
      - name: Install tomlq
        run: pip install yq
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo and build scripts
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Builder
        uses: ./.github/actions/setup-builder
      - name: Install Rust nightly
        run: |
          rustup toolchain install nightly-${RUST_NIGHTLY_VERSION}
      - name: Install cargo-nextest
        uses: taiki-e/install-action@cargo-nextest
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Test
        run: make test cover
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: codecov.json
          fail_ci_if_error: true
