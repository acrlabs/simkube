package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SimulationSpec defines the desired state of the Simulation
type SimulationSpec struct {
	DriverNamespace string `json:"driverNamespace"`
	Trace           string `json:"trace"`
}

// SimulationStatus defines the observed state of the Simulation
type SimulationStatus struct {
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:resource:shortName={sim,sims,simulation,simulations},scope=Cluster

// Simulation is the Schema for the simulations API
type Simulation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SimulationSpec   `json:"spec,omitempty"`
	Status SimulationStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// SimulationList contains a list of Simulations
type SimulationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Simulation `json:"items"`
}

// SimulationRootSpec is deliberately empty
type SimulationRootSpec struct {
}

//+kubebuilder:object:root=true
//+kubebuilder:resource:shortName={simroot,simroots},scope=Cluster

// SimulationRoot is the (empty) custom resource we hang everything else off of
type SimulationRoot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec SimulationRootSpec `json:"spec,omitempty"`
}

//+kubebuilder:object:root=true

// SimulationRootList contains a list of SimulationRoots
type SimulationRootList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SimulationRoot `json:"items"`
}

//nolint:gochecknoinits // generated by kubebuilder
func init() {
	SchemeBuilder.Register(&Simulation{}, &SimulationList{}, &SimulationRoot{}, &SimulationRootList{})
}
